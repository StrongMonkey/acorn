// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/acorn-io/runtime/pkg/dns (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	dns "github.com/acorn-io/runtime/pkg/dns"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CreateRecords mocks base method.
func (m *MockClient) CreateRecords(arg0, arg1, arg2 string, arg3 []dns.RecordRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecords", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRecords indicates an expected call of CreateRecords.
func (mr *MockClientMockRecorder) CreateRecords(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecords", reflect.TypeOf((*MockClient)(nil).CreateRecords), arg0, arg1, arg2, arg3)
}

// DeleteRecord mocks base method.
func (m *MockClient) DeleteRecord(arg0, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRecord", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRecord indicates an expected call of DeleteRecord.
func (mr *MockClientMockRecorder) DeleteRecord(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRecord", reflect.TypeOf((*MockClient)(nil).DeleteRecord), arg0, arg1, arg2, arg3)
}

// PurgeRecords mocks base method.
func (m *MockClient) PurgeRecords(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PurgeRecords", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// PurgeRecords indicates an expected call of PurgeRecords.
func (mr *MockClientMockRecorder) PurgeRecords(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PurgeRecords", reflect.TypeOf((*MockClient)(nil).PurgeRecords), arg0, arg1, arg2)
}

// Renew mocks base method.
func (m *MockClient) Renew(arg0, arg1, arg2 string, arg3 dns.RenewRequest) (dns.RenewResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Renew", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(dns.RenewResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Renew indicates an expected call of Renew.
func (mr *MockClientMockRecorder) Renew(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Renew", reflect.TypeOf((*MockClient)(nil).Renew), arg0, arg1, arg2, arg3)
}

// ReserveDomain mocks base method.
func (m *MockClient) ReserveDomain(arg0 string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReserveDomain", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ReserveDomain indicates an expected call of ReserveDomain.
func (mr *MockClientMockRecorder) ReserveDomain(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReserveDomain", reflect.TypeOf((*MockClient)(nil).ReserveDomain), arg0)
}
